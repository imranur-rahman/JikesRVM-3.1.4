# Taken from upstream GNU Classpath commit c17964c61a9d1fe570f40f32f12a4d246029b607 .
diff --git a/java/text/DateFormatSymbols.java b/java/text/DateFormatSymbols.java
index 6b0d3a1..41cf5c2 100644
--- a/java/text/DateFormatSymbols.java
+++ b/java/text/DateFormatSymbols.java
@@ -185,17 +185,16 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
     return data;
   }
 
-  private String[][] getZoneStrings(ResourceBundle res, Locale locale)
+  private String[][] getZoneStrings(List<ResourceBundle> bundles, Locale locale)
   {
     List<String[]> allZones = new ArrayList<String[]>();
     try
       {
         Map<String,String[]> systemZones = new HashMap<String,String[]>();
-        while (true)
+        for (ResourceBundle bundle : bundles)
           {
-            int index = 0;
             String country = locale.getCountry();
-            String data = res.getString("zoneStrings");
+            String data = bundle.getString("zoneStrings");
             String[] zones = ZONE_SEP.split(data);
             for (int a = 0; a < zones.length; ++a)
               {
@@ -222,12 +221,6 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
                   }
                 systemZones.put(strings[0], strings);
               }
-            if (res.getLocale() == Locale.ROOT)
-              break;
-            else
-              res = ResourceBundle.getBundle("gnu.java.locale.LocaleInformation",
-                                             LocaleHelper.getFallbackLocale(res.getLocale()),
-                                             ClassLoader.getSystemClassLoader());
           }
         /* Final sanity check for missing values */
         for (String[] zstrings : systemZones.values())
@@ -293,17 +286,49 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
     return allZones.toArray(new String[allZones.size()][]);
   }
 
-  private String[] formatsForKey(ResourceBundle res, String key)
+  /**
+   * Retrieve the date or time formats for a specific key e.g.
+   * asking for "DateFormat" will return an array containing the
+   * full, long, medium and short date formats localised for
+   * the locales in the specified bundle.
+   *
+   * @param bundles the stack of bundles to check, most-specific first.
+   * @param key the type of format to retrieve.
+   * @param an array of localised strings for each format prefix.
+   */
+  private String[] formatsForKey(List<ResourceBundle> bundles, String key)
   {
     String[] values = new String[formatPrefixes.length];
 
     for (int i = 0; i < formatPrefixes.length; i++)
-      values[i] = res.getString(formatPrefixes[i] + key);
+      values[i] = getString(bundles, formatPrefixes[i] + key);
 
     return values;
   }
 
   /**
+   * Simple wrapper around extracting a {@code String} from a
+   * {@code ResourceBundle}.  Keep searching less-specific locales
+   * until a non-null non-empty value is found.
+   *
+   * @param bundles the stack of bundles to check, most-specific first.
+   * @param key the key of the value to retrieve.
+   * @return the first non-null non-empty String found or the last
+   *         retrieved if one isn't found.
+   */
+  private String getString(List<ResourceBundle> bundles, String key)
+  {
+    String val = null;
+    for (ResourceBundle bundle : bundles)
+      {
+        val = bundle.getString(key);
+        if (val != null && !val.isEmpty())
+          return val;
+      }
+    return val;
+  }
+
+  /**
    * This method initializes a new instance of <code>DateFormatSymbols</code>
    * by loading the date format information for the specified locale.
    * This constructor only obtains instances using the runtime's resources;
@@ -334,14 +359,14 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
       }
     ampms = getStringArray(bundles, "ampms", 2);
     eras = getStringArray(bundles, "eras", 2);
-    localPatternChars = res.getString("localPatternChars");
+    localPatternChars = getString(bundles, "localPatternChars");
     months = getStringArray(bundles, "months", 13);
     shortMonths = getStringArray(bundles, "shortMonths", 13, months);
     weekdays = getStringArray(bundles, "weekdays", 8);
     shortWeekdays = getStringArray(bundles, "shortWeekdays", 8, weekdays);
-    dateFormats = formatsForKey(res, "DateFormat");
-    timeFormats = formatsForKey(res, "TimeFormat");
-    runtimeZoneStrings = getZoneStrings(res, locale);
+    dateFormats = formatsForKey(bundles, "DateFormat");
+    timeFormats = formatsForKey(bundles, "TimeFormat");
+    runtimeZoneStrings = getZoneStrings(bundles, locale);
   }
 
   /**

+    public String[] getShortWeekdays()
+    {
+      return shortWeekdays.clone();
+    }
+
+    /**
+     * Accessor for the date formats.
+     *
+     * @return the date formats.
+     */
+    public String[] getDateFormats()
+    {
+      return dateFormats.clone();
+    }
+
+    /**
+     * Accessor for the time formats.
+     *
+     * @return the time formats.
+     */
+    public String[] getTimeFormats()
+    {
+      return timeFormats.clone();
+    }
+
+    /**
+     * Accessor for the zone strings.
+     *
+     * @return the zone strings.
+     */
+    public String[][] getZoneStrings()
+    {
+      // Perform a deep clone so subarrays aren't modifiable
+      String[][] clone = runtimeZoneStrings.clone();
+      for (int a = 0; a < clone.length; ++a)
+        clone[a] = runtimeZoneStrings[a].clone();
+      return clone;
+    }
+
+  }
+
+  private static final ConcurrentMap<Locale, DFSData> dataCache = new ConcurrentHashMap<Locale, DFSData>();
+
+  String[] ampms;
+  String[] eras;
+  private String localPatternChars;
+  String[] months;
+  String[] shortMonths;
+  String[] shortWeekdays;
+  String[] weekdays;
+
+  /**
    * The timezone strings supplied by the runtime.
    */
   private String[][] runtimeZoneStrings;
@@ -185,7 +344,7 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
     return data;
   }
 
-  private String[][] getZoneStrings(List<ResourceBundle> bundles, Locale locale)
+  private static String[][] getZoneStrings(List<ResourceBundle> bundles, Locale locale)
   {
     List<String[]> allZones = new ArrayList<String[]>();
     try
@@ -296,7 +455,7 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
    * @param key the type of format to retrieve.
    * @param an array of localised strings for each format prefix.
    */
-  private String[] formatsForKey(List<ResourceBundle> bundles, String key)
+  private static String[] formatsForKey(List<ResourceBundle> bundles, String key)
   {
     String[] values = new String[formatPrefixes.length];
 
@@ -316,7 +475,7 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
    * @return the first non-null non-empty String found or the last
    *         retrieved if one isn't found.
    */
-  private String getString(List<ResourceBundle> bundles, String key)
+  private static String getString(List<ResourceBundle> bundles, String key)
   {
     String val = null;
     for (ResourceBundle bundle : bundles)
@@ -329,6 +488,52 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
   }
 
   /**
+   * Retrieves the locale data from the property files and constructs a
+   * {@code DFSData} instance for it.
+   *
+   * @param the locale for which data should be retrieved.
+   * @return the parsed data.
+   * @throws MissingResourceException if the resources for the specified
+   *                                  locale could not be found or loaded.
+   */
+  private static DFSData retrieveData(Locale locale)
+    throws MissingResourceException
+  {
+    DFSData data = dataCache.get(locale);
+    if (data == null)
+      {
+        ClassLoader ldr = ClassLoader.getSystemClassLoader();
+        List<ResourceBundle> bundles = new ArrayList<ResourceBundle>();
+        ResourceBundle res
+          = ResourceBundle.getBundle("gnu.java.locale.LocaleInformation", locale, ldr);
+        bundles.add(res);
+        Locale resLocale = res.getLocale();
+        while (resLocale != Locale.ROOT)
+          {
+            res = ResourceBundle.getBundle("gnu.java.locale.LocaleInformation",
+                                           LocaleHelper.getFallbackLocale(resLocale), ldr);
+            bundles.add(res);
+            resLocale = res.getLocale();
+          }
+        String[] lMonths = getStringArray(bundles, "months", 13);
+        String[] lWeekdays = getStringArray(bundles, "weekdays", 8);
+        data = new DFSData(getStringArray(bundles, "ampms", 2),
+                           getStringArray(bundles, "eras", 2),
+                           getString(bundles, "localPatternChars"),
+                           lMonths, getStringArray(bundles, "shortMonths", 13, lMonths),
+                           lWeekdays, getStringArray(bundles, "shortWeekdays", 8, lWeekdays),
+                           formatsForKey(bundles, "DateFormat"),
+                           formatsForKey(bundles, "TimeFormat"),
+                           getZoneStrings(bundles, locale));
+        DFSData cachedData = dataCache.putIfAbsent(locale, data);
+        // Use the earlier version if another thread beat us to it.
+        if (cachedData != null)
+          data = cachedData;
+      }
+    return data;
+  }
+
+  /**
    * This method initializes a new instance of <code>DateFormatSymbols</code>
    * by loading the date format information for the specified locale.
    * This constructor only obtains instances using the runtime's resources;
@@ -344,29 +549,17 @@ public class DateFormatSymbols implements java.io.Serializable, Cloneable
   public DateFormatSymbols (Locale locale)
     throws MissingResourceException
   {
-    ClassLoader ldr = ClassLoader.getSystemClassLoader();
-    List<ResourceBundle> bundles = new ArrayList<ResourceBundle>();
-    ResourceBundle res
-      = ResourceBundle.getBundle("gnu.java.locale.LocaleInformation", locale, ldr);
-    bundles.add(res);
-    Locale resLocale = res.getLocale();
-    while (resLocale != Locale.ROOT)
-      {
-        res = ResourceBundle.getBundle("gnu.java.locale.LocaleInformation",
-                                       LocaleHelper.getFallbackLocale(resLocale), ldr);
-        bundles.add(res);
-        resLocale = res.getLocale();
-      }
-    ampms = getStringArray(bundles, "ampms", 2);
-    eras = getStringArray(bundles, "eras", 2);
-    localPatternChars = getString(bundles, "localPatternChars");
-    months = getStringArray(bundles, "months", 13);
-    shortMonths = getStringArray(bundles, "shortMonths", 13, months);
-    weekdays = getStringArray(bundles, "weekdays", 8);
-    shortWeekdays = getStringArray(bundles, "shortWeekdays", 8, weekdays);
-    dateFormats = formatsForKey(bundles, "DateFormat");
-    timeFormats = formatsForKey(bundles, "TimeFormat");
-    runtimeZoneStrings = getZoneStrings(bundles, locale);
+    DFSData data = retrieveData(locale);
+    ampms = data.getAMPMs();
+    eras = data.getEras();
+    localPatternChars = data.getLocalPatternChars();
+    months = data.getMonths();
+    shortMonths = data.getShortMonths();
+    weekdays = data.getWeekdays();
+    shortWeekdays = data.getShortWeekdays();
+    dateFormats = data.getDateFormats();
+    timeFormats = data.getTimeFormats();
+    runtimeZoneStrings = data.getZoneStrings();
   }
 
   /**
